{"remainingRequest":"/Users/weizhibang/work/cloud_vue/node_modules/babel-loader/lib/index.js!/Users/weizhibang/work/cloud_vue/node_modules/eslint-loader/index.js??ref--13-0!/Users/weizhibang/work/cloud_vue/src/plugin/axios/index.js","dependencies":[{"path":"/Users/weizhibang/work/cloud_vue/src/plugin/axios/index.js","mtime":1538206615114},{"path":"/Users/weizhibang/work/cloud_vue/node_modules/cache-loader/dist/cjs.js","mtime":1538207325695},{"path":"/Users/weizhibang/work/cloud_vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/weizhibang/work/cloud_vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import store from '@/store';\nimport axios from 'axios';\nimport { Message } from 'element-ui';\nimport util from '@/libs/util'; // 创建一个错误\n\nfunction errorCreat(msg) {\n  var err = new Error(msg);\n  errorLog(err);\n  throw err;\n} // 记录和显示错误\n\n\nfunction errorLog(err) {\n  // 添加到日志\n  store.dispatch('d2admin/log/add', {\n    type: 'error',\n    err: err,\n    info: '数据请求异常'\n  }); // 打印到控制台\n\n  if (process.env.NODE_ENV === 'development') {\n    util.log.danger('>>>>>> Error >>>>>>');\n    console.log(err);\n  } // 显示提示\n\n\n  Message({\n    message: err.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n} // 创建一个 axios 实例\n\n\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_API,\n  timeout: 5000 // 请求超时时间\n\n}); // 请求拦截器\n\nservice.interceptors.request.use(function (config) {\n  // 在请求发送之前做一些处理\n  if (!/^https:\\/\\/|http:\\/\\//.test(config.url)) {\n    var token = util.cookies.get('token');\n\n    if (token && token !== 'undefined') {\n      // 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改\n      config.headers['X-Token'] = token;\n    }\n  }\n\n  return config;\n}, function (error) {\n  // 发送失败\n  console.log(error);\n  Promise.reject(error);\n}); // 响应拦截器\n\nservice.interceptors.response.use(function (response) {\n  // dataAxios 是 axios 返回数据中的 data\n  var dataAxios = response.data; // 这个状态码是和后端约定的\n\n  var code = dataAxios.code; // 根据 code 进行判断\n\n  if (code === undefined) {\n    // 如果没有 code 代表这不是项目后端开发的接口 比如可能是 D2Admin 请求最新版本\n    return dataAxios;\n  } else {\n    // 有 code 代表这是一个后端接口 可以进行进一步的判断\n    switch (code) {\n      case 0:\n        // [ 示例 ] code === 0 代表没有错误\n        return dataAxios.data;\n\n      case 'xxx':\n        // [ 示例 ] 其它和后台约定的 code\n        errorCreat(\"[ code: xxx ] \".concat(dataAxios.msg, \": \").concat(response.config.url));\n        break;\n\n      default:\n        // 不是正确的 code\n        errorCreat(\"\".concat(dataAxios.msg, \": \").concat(response.config.url));\n        break;\n    }\n  }\n}, function (error) {\n  if (error && error.response) {\n    switch (error.response.status) {\n      case 400:\n        error.message = '请求错误';\n        break;\n\n      case 401:\n        error.message = '未授权，请登录';\n        break;\n\n      case 403:\n        error.message = '拒绝访问';\n        break;\n\n      case 404:\n        error.message = \"\\u8BF7\\u6C42\\u5730\\u5740\\u51FA\\u9519: \".concat(error.response.config.url);\n        break;\n\n      case 408:\n        error.message = '请求超时';\n        break;\n\n      case 500:\n        error.message = '服务器内部错误';\n        break;\n\n      case 501:\n        error.message = '服务未实现';\n        break;\n\n      case 502:\n        error.message = '网关错误';\n        break;\n\n      case 503:\n        error.message = '服务不可用';\n        break;\n\n      case 504:\n        error.message = '网关超时';\n        break;\n\n      case 505:\n        error.message = 'HTTP版本不受支持';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  errorLog(error);\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["/Users/weizhibang/work/cloud_vue/src/plugin/axios/index.js"],"names":["store","axios","Message","util","errorCreat","msg","err","Error","errorLog","dispatch","type","info","process","env","NODE_ENV","log","danger","console","message","duration","service","create","baseURL","VUE_APP_API","timeout","interceptors","request","use","test","config","url","token","cookies","get","headers","error","Promise","reject","response","dataAxios","data","code","undefined","status"],"mappings":"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","sourcesContent":["import store from '@/store'\nimport axios from 'axios'\nimport { Message } from 'element-ui'\nimport util from '@/libs/util'\n\n// 创建一个错误\nfunction errorCreat (msg) {\n  const err = new Error(msg)\n  errorLog(err)\n  throw err\n}\n\n// 记录和显示错误\nfunction errorLog (err) {\n  // 添加到日志\n  store.dispatch('d2admin/log/add', {\n    type: 'error',\n    err,\n    info: '数据请求异常'\n  })\n  // 打印到控制台\n  if (process.env.NODE_ENV === 'development') {\n    util.log.danger('>>>>>> Error >>>>>>')\n    console.log(err)\n  }\n  // 显示提示\n  Message({\n    message: err.message,\n    type: 'error',\n    duration: 5 * 1000\n  })\n}\n\n// 创建一个 axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_API,\n  timeout: 5000 // 请求超时时间\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    // 在请求发送之前做一些处理\n    if (!(/^https:\\/\\/|http:\\/\\//.test(config.url))) {\n      const token = util.cookies.get('token')\n      if (token && token !== 'undefined') {\n        // 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改\n        config.headers['X-Token'] = token\n      }\n    }\n    return config\n  },\n  error => {\n    // 发送失败\n    console.log(error)\n    Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    // dataAxios 是 axios 返回数据中的 data\n    const dataAxios = response.data\n    // 这个状态码是和后端约定的\n    const { code } = dataAxios\n    // 根据 code 进行判断\n    if (code === undefined) {\n      // 如果没有 code 代表这不是项目后端开发的接口 比如可能是 D2Admin 请求最新版本\n      return dataAxios\n    } else {\n      // 有 code 代表这是一个后端接口 可以进行进一步的判断\n      switch (code) {\n        case 0:\n          // [ 示例 ] code === 0 代表没有错误\n          return dataAxios.data\n        case 'xxx':\n          // [ 示例 ] 其它和后台约定的 code\n          errorCreat(`[ code: xxx ] ${dataAxios.msg}: ${response.config.url}`)\n          break\n        default:\n          // 不是正确的 code\n          errorCreat(`${dataAxios.msg}: ${response.config.url}`)\n          break\n      }\n    }\n  },\n  error => {\n    if (error && error.response) {\n      switch (error.response.status) {\n        case 400: error.message = '请求错误'; break\n        case 401: error.message = '未授权，请登录'; break\n        case 403: error.message = '拒绝访问'; break\n        case 404: error.message = `请求地址出错: ${error.response.config.url}`; break\n        case 408: error.message = '请求超时'; break\n        case 500: error.message = '服务器内部错误'; break\n        case 501: error.message = '服务未实现'; break\n        case 502: error.message = '网关错误'; break\n        case 503: error.message = '服务不可用'; break\n        case 504: error.message = '网关超时'; break\n        case 505: error.message = 'HTTP版本不受支持'; break\n        default: break\n      }\n    }\n    errorLog(error)\n    return Promise.reject(error)\n  }\n)\n\nexport default service\n"]}]}